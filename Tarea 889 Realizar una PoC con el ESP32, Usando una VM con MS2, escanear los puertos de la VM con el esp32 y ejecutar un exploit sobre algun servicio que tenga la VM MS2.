Video de la prueba de concepto en accion:
https://www.youtube.com/watch?v=0DIR9kpaK6w&ab_channel=SerchxD2



Codigo usado en ESP32:


import network
import urequests
import socket
import time
import json

# Configuración de red Wi-Fi
SSID = 'INFINITUMDC18'
PASSWORD = 'dXXe66aFEE'

# Configuración del escáner
target_ip = "192.168.1.85"
ports = {
    21: "FTP",
    22: "SSH",
    23: "Telnet"  # Agregamos el puerto 23 para Telnet
}
webhook_url = "https://discord.com/api/webhooks/1303259070136057907/Q_DY9QLGUd1UesXZhPmw-cC1d6li-IjhAzt8AbldI7ILvdGnKYjU-cQ8N2SvG1ToHrlX"

# Conexión a Wi-Fi
def conectar_wifi():
    print("Conectando a la red Wi-Fi...")
    wlan = network.WLAN(network.STA_IF)
    wlan.active(True)
    wlan.connect(SSID, PASSWORD)

    while not wlan.isconnected():
        time.sleep(1)
    print("Conectado a Wi-Fi:", wlan.ifconfig())

# Escaneo de puertos y obtención de versiones
def scan_ports_and_get_versions(ip, ports, attempts=3, timeout=3):
    results = {}
    for port, service in ports.items():
        is_open = False
        version_info = "Unknown"
        for attempt in range(attempts):
            sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            sock.settimeout(timeout)
            try:
                sock.connect((ip, port))
                is_open = True
                # Intento de obtener versión
                if service == "FTP":
                    sock.send(b'FEAT\r\n')
                    version_info = sock.recv(1024).decode('utf-8', 'ignore')
                elif service == "SSH":
                    version_info = sock.recv(1024).decode('utf-8', 'ignore')
                break
            except OSError:
                time.sleep(1)
            finally:
                sock.close()
        
        if is_open:
            results[port] = f"Open ({service}), Version info: {version_info.strip()}"
        else:
            results[port] = "Closed"
    return results

# Enviar resultados a Discord
def enviar_a_discord(mensaje):
    headers = {'Content-Type': 'application/json'}
    data = json.dumps({"content": mensaje})
    
    try:
        response = urequests.post(webhook_url, data=data.encode('utf-8'), headers=headers)
        response.close()
        print("Mensaje enviado a Discord")
    except Exception as e:
        print("Error al enviar a Discord:", e)

# Función principal
def main():
    conectar_wifi()
    scan_results = scan_ports_and_get_versions(target_ip, ports)
    mensaje = f"Port scan results for IP {target_ip}:\n"
    for port, status in scan_results.items():
        mensaje += f"Port {port}: {status}\n"
    
    enviar_a_discord(mensaje)
    print("Scan complete and results sent to Discord.")

# Ejecutar el programa
main()
